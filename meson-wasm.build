# WASM-specific meson build configuration for GEGL
# This file configures GEGL for WebAssembly compilation with minimal dependencies
# Usage: meson --cross-file=cross/emscripten.txt meson-wasm.build build-wasm

project('gegl',
  'c', 'cpp',
  license: 'GPL3+',
  version: '0.4.63',
  meson_version: '>=0.57.0',
  default_options: [
    'c_std=gnu11',
    'cpp_std=c++14',
    'buildtype=release',
  ],
)

# Making releases on the stable branch:
#   micro_version += 1;
#   interface_age += 1;
#   binary_age += 1;
# if any functions have been added,
#    set interface_age to 0.
# if backwards compatibility has been broken,
#    set binary_age _and_ interface_age to 0.

config    = configuration_data()

fs        = import('fs')
pkgconfig = import('pkgconfig')
i18n      = import('i18n')
gnome     = import('gnome')
python    = import('python').find_installation()

cc        = meson.get_compiler('c')
cpp       = meson.get_compiler('cpp')
buildtype = get_option('buildtype')

gegl_prefix     = get_option('prefix')
gegl_gtk_docdir = gnome.gtkdoc_html_dir('gegl')
gegl_libdir     = get_option('libdir')

project_build_root = meson.current_build_dir()
project_source_root = meson.current_source_dir()

################################################################################
# Dependency versions
#
# Core - required
dep_ver = {
  'babl'            : '>=0.1.112',
  'glib'            : '>=2.44.0',
  'json-glib'       : '>=1.0.0',
  'poly2tri-c'      : '>=0.0.0',
}

# Core - optional (disabled for WASM)
dep_ver += {
  'g-ir'            : '>=1.32.0',
  'vapigen'         : '>=0.20.0',
}

# GEGL binary - optional (disabled for WASM)
dep_ver += {
  'gexiv2'          : '>=0.14.0',
  'libpng'          : '>=1.6.0',
  'luajit'          : '>=2.0.4',
  'mrg'             : '>=0.0.0',
}

# Operations - optional (disabled for WASM)
dep_ver += {
  'gdk-pixbuf'      : '>=2.32.0',
  'cairo'           : '>=1.12.2',
  'pango'           : '>=1.38.0',
  'pangocairo'      : '>=1.38.0',
  'jasper'          : '>=1.900.1',
  'lcms'            : '>=2.8',
  'lensfun'         : '>=0.2.5',
  'libjpeg'         : '>=1.0.0',
  'libraw'          : '>=0.15.4',
  'librsvg'         : '>=2.40.6',
  'libspiro'        : '>=0.5.0',
  'libtiff'         : '>=4.0.0',
  'libv4l1'         : '>=1.0.1',
  'libv4l2'         : '>=1.0.1',
  'libwebp'         : '>=0.5.0',
  'maxflow'         : '>=3.0.4',
  'openexr'         : '>=1.6.1',
  'poppler'         : '>=0.71.0',
  'sdl1'            : '>=1.2.0',
  'sdl2'            : '>=2.0.5',
  'libavcodec'      : '>=55.69.100',
  'libavformat'     : '>=55.48.100',
  'libavutil'       : '>=55.92.100',
  'libswscale'      : '>=2.6.100',
}

# Tests (runtime) - optional (disabled for WASM)
dep_ver += {
  'pygobject'       : '>=3.2.0',
}

# Project infos
version = meson.project_version()
array_version = version.split('.')
major_version = array_version[0].to_int()
minor_version = array_version[1].to_int()
micro_version = array_version[2].to_int()

api_version = '@0@.@1@'.format(major_version, minor_version)
api_name    = meson.project_name() + '-' + api_version
gettext_package = api_name
stability_version_number = (major_version != 0 ? minor_version : micro_version)
stable = (stability_version_number % 2 == 0)

config.set        ('GEGL_MAJOR_VERSION',  '@0@'.format(major_version))
config.set        ('GEGL_MINOR_VERSION',  '@0@'.format(minor_version))
config.set        ('GEGL_MICRO_VERSION',  '@0@'.format(micro_version))
config.set        ('GEGL_UNSTABLE',       not stable)
config.set_quoted ('GEGL_LIBRARY',        '@0@'.format(api_name))
config.set_quoted ('GETTEXT_PACKAGE',     '@0@'.format(gettext_package))
config.set        ('GEGL_WASM_BUILD',     true)

# Libtool versionning
interface_age = 1
binary_age = 100 * minor_version + micro_version
lt_current = binary_age - interface_age
so_version  = '@0@.@1@.@2@'.format(0, lt_current, interface_age)

################################################################################
# Host system detection
host_os = host_machine.system()
os_win32  = host_os.contains('mingw') or host_os.contains('windows')
os_android= host_os.contains('android')
os_osx    = host_os.contains('darwin')
host_cpu_family = host_machine.cpu_family()

if host_cpu_family.contains('wasm')
  config.set10('ARCH_WASM', true)
  wasm_simd_flags = ['-DSIMD_WASM_SIMD']
endif

can_run_host_binaries = meson.can_run_host_binaries()

################################################################################
# Compiler arguments
cflags_common = []
cflags_c      = []
cflags_cpp    = []
lflags_common = []

cflags_common += '-DHAVE_CONFIG_H'

if buildtype == 'debugoptimized' or buildtype == 'debug'
  cflags_common += '-DGEGL_ENABLE_DEBUG'
endif

cflags_common += [
  '-Winit-self',
  '-Wmissing-declarations',
  '-Wpointer-arith',
  '-Wno-unused-parameter',
  '-Wno-cast-function-type',
  '-Wno-implicit-function-declaration'
]
cflags_c = [
  '-Wmissing-prototypes',
  '-Wold-style-definition',
]

# DEBUG SYMBOLS (disabled for WASM release build)
if buildtype == 'debug' or buildtype == 'debugoptimized'
  debugging_format = 'DWARF'
  if cc.get_id() == 'clang'
    cflags_common += '-gdwarf-aranges'
  endif
endif

if os_win32
  cflags_common += '-D_FILE_OFFSET_BITS=64'
  if cc.get_id() == 'clang'
    cflags_common += '-fansi-escape-codes'
  endif
  if cc.get_id() == 'clang-cl' or cc.get_id() == 'msvc'
    cflags_common += ['/D_USE_MATH_DEFINES']
    cflags_common += ['/D_CRT_SECURE_NO_WARNINGS']
  endif
endif

if buildtype == 'debugoptimized' or buildtype == 'release'
  cflags_common += cc.get_supported_arguments(['-ftree-vectorize'])
endif

# Aggressive size optimization for production builds
if buildtype == 'release'
  cflags_common += [
    '-Oz',
    '-flto',
    '-fdata-sections',
    '-ffunction-sections',
    '-fvisibility=hidden',
    '-fmerge-all-constants',
    '-fomit-frame-pointer',
    '-fstrict-aliasing'
  ]
  lflags_common += [
    '-s', 'ASSERTIONS=0',
    '-s', 'DEMANGLE_SUPPORT=0',
    '-s', 'DISABLE_EXCEPTION_CATCHING=1',
    '-s', 'ENVIRONMENT=web',
    '-s', 'FILESYSTEM=0',
    '-s', 'INVOKE_RUN=0',
    '-s', 'MALLOC=emmalloc',
    '-s', 'MODULARIZE=1',
    '-s', 'NO_EXIT_RUNTIME=1',
    '-s', 'SHRINK_LEVEL=2',
    '-s', 'STRICT=1',
    '-s', 'USE_ES6_IMPORT_META=0',
    '-s', 'WASM=1',
    '-s', 'WASM_ASYNC_COMPILATION=0',
    '-s', 'WASM_BIGINT=0',
    '-s', 'WASM_OBJECT_FILES=0',
    '-Wl,--gc-sections',
    '-g0'
  ]
endif

cflags_c   = cflags_common + cflags_c
cflags_cpp = cflags_common + cflags_cpp

add_project_arguments(cc.get_supported_arguments(cflags_c), language: 'c')
add_project_arguments(cpp.get_supported_arguments(cflags_cpp), language: 'cpp')
add_project_link_arguments(lflags_common, language: [ 'c', 'cpp' ])

################################################################################
# Required Dependencies
config.set('HAVE_UNISTD_H',    cc.has_header('unistd.h'))
config.set('HAVE_EXECINFO_H',  cc.has_header('execinfo.h'))
config.set('HAVE_FSYNC',       cc.has_function('fsync'))
config.set('HAVE_MALLOC_TRIM', cc.has_function('malloc_trim'))
config.set('HAVE_STRPTIME',    cc.has_function('strptime'))

math    = cc.find_library('m',  required: false)
libdl   = cc.find_library('dl', required : false)
thread  = dependency('threads')

babl      = dependency('babl-0.1',    version: dep_ver.get('babl'), required: false)
if not babl.found()
  babl    = dependency('babl',        version: dep_ver.get('babl'), required: false)
  if not babl.found()
    babl  = dependency('babl-0.1',    version: dep_ver.get('babl'))
  endif
endif
glib      = dependency('glib-2.0',    version: dep_ver.get('glib'))
gobject   = dependency('gobject-2.0', version: dep_ver.get('glib'))
gmodule   = dependency('gmodule-2.0', version: dep_ver.get('glib'))
gthread   = disabler()  # Disabled for WASM - use wasm-threading.c instead
gio_os    = os_win32 ? 'gio-windows-2.0' : 'gio-unix-2.0'
gio       = [
             dependency('gio-2.0',     version: dep_ver.get('glib')),
             dependency(gio_os,        version: dep_ver.get('glib')),
]
json_glib = dependency('json-glib-1.0',
  version: dep_ver.get('json-glib')
)
libjpeg   = dependency('libjpeg',     version: dep_ver.get('libjpeg'))
libpng    = dependency('libpng',      version: dep_ver.get('libpng'))

# Required libraries eventually provided in subprojects/
poly2tri_c = dependency('poly2tri-c',
  version:  dep_ver.get('poly2tri-c'),
  fallback: ['poly2tri-c', 'poly2tri_c'],
  required: false,
)
libnsgif = dependency('libnsgif',
  fallback: ['libnsgif', 'libnsgif'],
)

################################################################################
# Optionnal Dependencies (all disabled for WASM)
g_ir = disabler()
vapigen = disabler()

# GEGL binary (disabled for WASM)
gexiv2    = disabler()
lua       = disabler()
mrg       = disabler()

# Operations (disabled for WASM)
gdk_pixbuf= disabler()
cairo     = disabler()
pango     = disabler()
pangocairo = disabler()
jasper    = disabler()
lcms      = disabler()
lensfun   = disabler()
libraw    = disabler()
librsvg   = disabler()
libspiro  = disabler()
libtiff   = disabler()
libv4l1   = disabler()
libv4l2   = disabler()
libwebp   = disabler()
maxflow   = disabler()
openexr   = disabler()
openmp    = disabler()
poppler = disabler()
sdl1      = disabler()
sdl2      = disabler()
libavcodec = disabler()
libavformat = disabler()
libavutil = disabler()
libswscale = disabler()
avlibs_found = false
avlibs = []
libumfpack = disabler()
pygobject3 = disabler()

################################################################################
# Build flags
build_docs = false
build_reference = false
gi_docgen = disabler()
build_gi_docgen = false

################################################################################
# Subdirs
configure_file(
  output: 'config.h',
  configuration: config
)

rootInclude = include_directories('.')

subdir('libs/rgbe')
subdir('opencl')
subdir('gegl')
subdir('libs/npd')
subdir('libs/ctx')

# pkg-config file
gegl_pub_deps = [
  glib,
  gobject,
  gmodule,
  gio,
  json_glib,
  babl,
]

pkgconfig.generate(gegl_lib,
  filebase: 'gegl-' + api_version,
  name: 'GEGL',
  description: 'Generic Graphics Library',
  version: meson.project_version(),
  variables: 'pluginsdir=' + '${prefix}' / get_option('libdir') / api_name,
  libraries: gegl_pub_deps + [ gegl_npd_lib ],
  subdirs: api_name,
)

gegl_dep = declare_dependency(link_with: [gegl_lib, gegl_ctx_lib],
  include_directories: geglInclude,
  dependencies: [gegl_pub_deps, libnpd],
)

if meson.version().version_compare('>=0.54.0')
  meson.override_dependency('gegl-' + api_version, gegl_dep)
endif

subdir('seamless-clone')
subdir('operations')
subdir('js')

# Skip GUI binaries, tools, examples, tests, perf, po, docs for WASM
# subdir('bin')      # GUI binary
# subdir('tools')    # Tools that may depend on GUI
# subdir('examples') # Examples that may use GUI
# subdir('tests')    # Tests
# subdir('perf')     # Performance tests
# subdir('po')       # Translations
# subdir('docs')     # Documentation

################################################################################
# Build summary
summary(
  {
    'prefix'        : gegl_prefix,
    'libdir'        : gegl_libdir,
  }, section: 'Directories'
)
summary(
  {
    'GTK-docs reference'  : false,
    'GI-docgen reference' : false,
    'Docs (GEGL website)' : false,
  }, section: 'GEGL docs'
)
summary(
  {
    'Workshop'       : false,
    'Introspection'        : false,
    'Vala support'         : false,
    'Debug symbols format' : debugging_format,
  }, section: 'Optional features'
)
summary(
  {
    'avlibs'            : false,
    'Cairo'             : false,
    'GDKPixbuf'         : false,
    'gexiv2'            : false,
    'Jasper'            : false,
    'lcms'              : false,
    'libnsgif'          : libnsgif.found(),
    'libraw'            : false,
    'Luajit'            : false,
    'maxflow'           : false,
    'mrg'               : false,
    'OpenEXR'           : false,
    'openMP'            : false,
    'Pango'             : false,
    'pangocairo'        : false,
    'poly2tri-c'        : poly2tri_c.found(),
    'poppler'           : false,
    'rsvg'              : false,
    'SDL1'              : false,
    'SDL2'              : false,
    'spiro'             : false,
    'TIFF'              : false,
    'umfpack'           : false,
    'V4L'               : false,
    'V4L2'              : false,
    'webp'              : false,
  }, section: 'Optional dependencies'
)
summary(
  {
    'Target': 'WebAssembly',
    'GUI components': 'disabled',
    'Documentation': 'disabled',
    'Tests': 'disabled',
    'Examples': 'disabled',
    'Tools': 'disabled',
  }, section: 'WASM Build Configuration'
)